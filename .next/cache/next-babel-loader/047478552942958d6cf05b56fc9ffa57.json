{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nuri\\\\Desktop\\\\development\\\\pages\\\\signup.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useState } from 'react';\nimport { Box } from 'reflexbox';\nimport { Label, Input } from '@rebass/forms';\nimport styled from '@emotion/styled';\nimport axios from 'axios';\n\nconst SignUp = () => {\n  const {\n    0: email,\n    1: setEmail\n  } = useState('');\n  const {\n    0: password,\n    1: setPassword\n  } = useState('');\n  const {\n    0: error,\n    1: setError\n  } = useState('');\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n    const {\n      API_URL\n    } = process.env;\n    axios.post(`${API_URL}/auth/local/register`, {\n      username: email,\n      email,\n      password\n    }).then(response => {\n      setUser(response);\n    }).catch(error => {\n      console.log(error.response.data.message[0].messages[0]); // setError(error.response.data.data[0].messages[0].message)\n    });\n  };\n\n  return __jsx(Box, {\n    variant: \"formContainer\",\n    as: \"form\",\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }\n  }, __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }\n  }, \"Sign Up\"), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }\n  }), __jsx(Label, {\n    htmlFor: \"email\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }\n  }, \"Email\"), __jsx(Input, {\n    id: \"email\",\n    name: \"email\",\n    type: \"email\",\n    value: email,\n    onChange: event => setEmail(event.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 17\n    }\n  }), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 19\n    }\n  }), __jsx(Label, {\n    htmlFor: \"password\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 17\n    }\n  }, \"Password\"), __jsx(Input, {\n    id: \"password\",\n    name: \"password\",\n    type: \"password\",\n    value: password,\n    onChange: event => setPassword(event.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 17\n    }\n  }), error && __jsx(\"h2\", {\n    style: {\n      color: 'red'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 27\n    }\n  }, __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 55\n    }\n  }), error), __jsx(ButtonStyled, {\n    type: \"submit\",\n    variant: \"submitButton\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 17\n    }\n  }, \"SignUp\"));\n};\n\nconst ButtonStyled = styled.button`\n    border: 1px solid black;\n    height: 30px;\n    width: 70px;\n    font-weight: bold;\n    margin-top: 20px;\n`;\nexport default SignUp;","map":{"version":3,"sources":["C:/Users/nuri/Desktop/development/pages/signup.js"],"names":["useState","Box","Label","Input","styled","axios","SignUp","email","setEmail","password","setPassword","error","setError","handleSubmit","event","preventDefault","API_URL","process","env","post","username","then","response","setUser","catch","console","log","data","message","messages","target","value","color","ButtonStyled","button"],"mappings":"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","sourcesContent":["import { useState } from 'react'\r\nimport { Box } from 'reflexbox'\r\nimport { Label, Input } from '@rebass/forms'\r\nimport styled from '@emotion/styled'\r\nimport axios from 'axios'\r\n\r\n\r\nconst SignUp = () => {\r\n\r\n    const [email, setEmail] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [error, setError] = useState('')\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault()\r\n\r\n        const { API_URL } = process.env\r\n        axios\r\n        .post(`${API_URL}/auth/local/register`,{\r\n            username: email,\r\n            email,\r\n            password,\r\n        })\r\n        .then(response => {\r\n            setUser(response)\r\n        })\r\n        .catch(error => \r\n            {\r\n            console.log(error.response.data.message[0].messages[0])\r\n            // setError(error.response.data.data[0].messages[0].message)\r\n        })\r\n    }\r\n\r\n    return(\r\n        <Box variant = \"formContainer\" as = \"form\" onSubmit = {handleSubmit}>\r\n            <h2>Sign Up</h2>\r\n            <br/>\r\n            <Label htmlFor='email'>Email</Label>\r\n                <Input\r\n                    id='email'\r\n                    name='email'\r\n                    type='email'\r\n                    value = {email}\r\n                    onChange = {(event) => setEmail(event.target.value)}\r\n                /><br />\r\n                <Label htmlFor='password'>Password</Label>\r\n                <Input\r\n                    id='password'\r\n                    name='password'\r\n                    type='password'\r\n                    value = {password}\r\n                    onChange = {(event) => setPassword(event.target.value)}\r\n                />\r\n                {error && <h2 style = {{color:'red'}}><br/>{error}</h2>}\r\n                <ButtonStyled type = \"submit\" variant = \"submitButton\">SignUp</ButtonStyled>\r\n        </Box>\r\n    )\r\n}\r\n\r\nconst ButtonStyled = styled.button`\r\n    border: 1px solid black;\r\n    height: 30px;\r\n    width: 70px;\r\n    font-weight: bold;\r\n    margin-top: 20px;\r\n`\r\nexport default SignUp"]},"metadata":{},"sourceType":"module"}